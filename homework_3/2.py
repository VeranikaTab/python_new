# В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
# Не учитывать знаки препинания и регистр символов.
# За основу возьмите любую статью из википедии или из документации к языку.

text = """
      Дизайн языка Python построен вокруг объектно-ориентированной модели программирования. 
      Реализация ООП в Python является хорошо продуманной, но вместе с тем достаточно специфической 
      по сравнению с другими объектно-ориентированными языками. В языке всё является объектами — 
      либо экземплярами классов, либо экземплярами метаклассов. Исключением является базовый встроенный
      метакласс type. Таким образом, классы на самом деле являются экземплярами метаклассов, а производные
      метаклассы являются экземплярами метакласса type. Метаклассы являются частью концепции 
      метапрограммирования и предоставляют возможность управления наследованием классов, что позволяет 
      создавать абстрактные классы, регистрировать классы или добавлять в них какой-либо программный интерфейс 
      в рамках библиотеки или фреймворка.
      Классы по своей сути представляют план или описание того, как создать объект, и хранят в себе описание 
      атрибутов объекта и методов для работы с ним. Парадигма ООП основывается на инкапсуляции, наследовании и
      полиморфизме [88].
      Инкапсуляция в Python представлена возможностью хранения публичных и скрытых атрибутов (полей) в объекте 
      с предоставлением методов для работы с ними [88], при этом на самом деле все атрибуты являются публичными,
      но для пометки скрытых атрибутов существует соглашение об именовании. Наследование позволяет создавать 
      производные объекты без необходимости повторного написания кода, а полиморфизм заключается в 
      возможности переопределения любых методов объекта (в Python все методы являются виртуальными), 
      а также в перегрузке методов и операторов. Перегрузка методов в Python реализуется за счёт возможности вызова 
      одного и того же метода с разным набором аргументов. Особенностью Python является возможность модифицировать 
      классы после их объявления, добавляя в них новые атрибуты и методы, также можно модифицировать и сами объекты, 
      в результате чего классы могут использоваться как структуры для хранения произвольных данных.
      """

# text_new = [word.rstrip(',.()').lower() for word in text.split() if len(word) > 2]
text_new = [word.rstrip(',.()').lower() for word in text.split()]
print(*sorted(set(text_new), key=text_new.count, reverse=True)[:10])

# Функция sorted() возвращает новый отсортированный список итерируемого объекта (списка, словаря, кортежа).
# По умолчанию она сортирует его по возрастанию.

# Сортировка строк осуществляется по ASCII-значениям.

# Возвращаемое значение — List (список).
# Синтаксис: sorted(iterable,key=None,reverse=False).
# iterable: строка, список, кортеж, множество, словарь
# key (необязательный параметр): если указать ключ, то сортировка будет выполнена по функции этого ключа.
# reverse (необязательный параметр): по умолчанию сортировка выполняется по возрастанию.
# Если указать reverse=True, то можно отсортировать по убыванию.
